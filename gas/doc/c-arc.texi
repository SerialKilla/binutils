@c Copyright 2000, 2001, 2005, 2006, 2007, 2011 Free Software Foundation, Inc.
@c Copyright 2013 Synopsys Inc.
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node ARC-Dependent
@chapter ARC Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter ARC Dependent Features
@end ifclear

@set ARC_CORE_DEFAULT 6

@cindex ARC support
@menu
* ARC Options::              Options
* ARC Syntax::               Syntax
* ARC Floating Point::       Floating Point
* ARC Directives::           ARC Machine Directives
* ARC Modifiers::            ARC Assembler Modifiers
* ARC Symbols::              ARC Predefined Symbols
* ARC Opcodes::              Opcodes
@end menu


@node ARC Options
@section Options
@cindex ARC options
@cindex options for ARC

The following options control the type of CPU for which code is
assembled, and generic constraints on the code generated:

@table @code

@item -mcpu=@var{cpu}
@cindex @code{-mcpu=@var{cpu}} command line option, ARC
Set architecture type and register usage for @var{cpu}.  There are
also shortcut alias options available for backward compatibility and
convenience.  Supported values for @var{cpu} are

@table @code
@cindex @code{mA6} command line option, ARC
@cindex @code{mARC600} command line option, ARC
@item ARC600
Assemble for ARC600.  Aliases: @code{-mA6}, @code{-mARC600}. This
is the default.

@item ARC601
@cindex @code{mARC600} command line option, ARC
Assemble for ARC601. Alias: @code{-mARC601}.

@item ARC700
@cindex @code{mA7} command line option, ARC
@cindex @code{mARC700} command line option, ARC
Assemble for ARC700.  Aliases: @code{-mA7}, @code{-mARC700}.

@item ARCv2EM
@cindex @code{mEM} command line option, ARC
@cindex @code{mARCv2EM} command line option, ARC
@cindex @code{mav2em} command line option, ARC
Assemble for ARC v2 EM.  Aliases: @code{-mEM},
@code{-mARCv2EM}.

@end table

@emph{Note:} the @code{.option} directive can to be used to select a core
variant from within assembly code.

@item -mld-extension-reg-mask=@var{mask}
@cindex @code{-mld-extension-reg-mask=@var{mask}} command line option, ARC
Gives a bit mask specifying which extension core registers are supported.

@item -muser-mode-only
@cindex @code{user-mode-only} command line option, ARC
Only assemble user mode instructions. Any other instructions will
trigger an error.

@end table

@c ARC extension instructions
ARC is a family of configurable processors.  Different extensions
provide additional instructions which must be supportd by the
assembler.  The following options control which extension instructions
are supported:

@table @code

@item -mbarrel-shifter
@cindex @code{-mbarrel-shifter} command line option, ARC
Assemble instructions supported by the barrel shifter.

@item -mdpfp
@cindex @code{-mdpfp} command line option, ARC
@itemx -mdpfp-compact
@cindex @code{-mdpfp-compact} command line option, ARC
@itemx -mdpfp-fast
@cindex @code{-mdpfp-fast} command line option, ARC
Assemble double precision floating point instructions supported by the
@code{FPX} extension.  There is no difference between the options;
they are provided to allow them to be passed down directly from the
compiler, where the different options provide different effects.

@item -mdsp-packa
@cindex @code{-mdsp-packa} command line option, ARC
Assemble instructions supported by the DSP 3.1 Pack A extensions.

@item -mdvbf
@cindex @code{-mdvbf} command line option, ARC
Assemble instructions supported by the dual Viterbi butterfly
extension.

@item -mea
@cindex @code{-mea} command line option, ARC
Assemble extended arithmetic instructions.

@item -mlock
@cindex @code{-mlock} command line option, ARC
Assemble instructions supported by the @code{LLOCK} and @code{SCOND}
extensions added with the ARC700 core 4 processor, version v4.10.

@item -mmac-24
@cindex @code{-mmac-24} command line option, ARC
Assemble instructions supported by the @code{MMAC-24} extenson.

@item -mmac-d16
@cindex @code{-mmac-d16} command line option, ARC
Assemble instructions supported by the @code{MMAC-D16} extenson.

@item -mmin-max
@cindex @code{-mmin-max} command line option, ARC
Assemble instructions supported by the @code{MIN-MAX} extension.

@item -mmul64
@cindex @code{-mmul64} command line option, ARC
Assemble @code{mul64} and @code{mulu64} instructions.

@item -mno-mpy
@cindex @code{-mno-mpy} command line option, ARC
Do not assemble @code{mpy} instructions.

@item -mnorm
@cindex @code{-mnorm} command line option, ARC
Assemble @code{norm} instructions.

@item -mrtsc
@cindex @code{-mrtsc} command line option, ARC
Assemble instructions supported by the @code{RTSC} extension added
with the ARC700 core 4 processor, version v4.10.

@item -msimd
@cindex @code{-msimd} command line option, ARC
Assemble instructions supported by the @code{SIMD} extension.

@item -mspfp
@cindex @code{-mspfp} command line option, ARC
@itemx -mspfp-compact
@cindex @code{-mspfp-compact} command line option, ARC
@itemx -mspfp-fast
@cindex @code{-mspfp-fast} command line option, ARC
Assemble single precision floating point instructions supported by the
@code{FPX} extension.  There is no difference between the options;
they are provided to allow them to be passed down directly from the
compiler, where the different options provide different effects.

@item -mswap
@cindex @code{-mswap} command line option, ARC
Assemble @code{swap} instructions.

@item -mswape
@cindex @code{-mswape} command line option, ARC
Assemble instructions supported by the @code{SWAPE} extension added
with the ARC700 core 4 processor, version v4.10.

@item -mtelephony
@cindex @code{-mtelephony} command line option, ARC
Assemble single and dual operand instructions supported by the
@code{TELEPHONY} extension.

@item -mxy
@cindex @code{-mxy} command line option, ARC
Assemble instructions supported by the XY Memory extension (DSP
version 3).

@end table

The following options are maintained for backward compatibility, but
are now deprecated and will be removed in a future release:

@c Deprecated options
@table @code

@item -EB
@cindex @code{-EB} command line option, ARC
This option specifies that the output generated by the assembler
should be encoded for a big-endian processor and marked as such.  Use
of this option is now deprecated.  Users wanting big-endian code,
should use the @emph{arceb-} targets when building the tool chain, for
which big-endian is the default.

@item -EL
@cindex @code{-EL} command line option, ARC
This option specifies that the output generated by the assembler
should be encoded for a little-endian processor and marked as such.  Use
of this option is now deprecated.  Users wanting little-endian code,
should use the @emph{arc-} targets when building the tool chain, for
which little-endian is the default.

@item -mbarrel_shifter
@cindex @code{-mbarrel_shifter} command line option, ARC
Replaced by @code{-mbarrel-shifter}

@item -mdpfp_compact
@cindex @code{-mdpfp_compact} command line option, ARC
Replaced by @code{-mdpfp-compact}

@item -mdpfp_fast
@cindex @code{-mdpfp_fast} command line option, ARC
Replaced by @code{-mdpfp-fast}

@item -mdsp_packa
@cindex @code{-mdsp_packa} command line option, ARC
Replaced by @code{-mdsp-packa}

@item -mEA
@cindex @code{-mEA} command line option, ARC
Replaced by @code{-mea}

@item -mmac_24
@cindex @code{-mmac_24} command line option, ARC
Replaced by @code{-mmac-24}

@item -mmac_d16
@cindex @code{-mmac_d16} command line option, ARC
Replaced by @code{-mmac-d16}

@item -min_max
@cindex @code{-mmin_max} command line option, ARC
Replaced by @code{-mmin-max}

@item -mspfp_compact
@cindex @code{-mspfp_compact} command line option, ARC
Replaced by @code{-mspfp-compact}

@item -mspfp_fast
@cindex @code{-mspfp_fast} command line option, ARC
Replaced by @code{-mspfp-fast}

@end table

@node ARC Syntax
@section Syntax
@menu
* ARC-Chars::                Special Characters
* ARC-Regs::                 Register Names
@end menu

@node ARC-Chars
@subsection Special Characters

@table @code
@item %
@cindex register name prefix character, ARC
@cindex ARC register name prefix character
A register name can optionally be prefixed by a @samp{%} character.  So
register @code{%r0} is equivalent to @code{r0} in the assembly code.

@item #
@cindex line comment character, ARC
@cindex ARC line comment character
The presence of a @samp{#} character within a line (but not at the
start of a line) indicates the start of a comment that extends to the
end of the current line.

@emph{Note:} if a line starts with a @samp{#} character then it can
also be a logical line number directive (@pxref{Comments}) or a
preprocessor control command (@pxref{Preprocessing}).

@item @@
@cindex symbol prefix character, ARC
@cindex ARC symbol prefix character
Prefixing an operand with an @samp{@@} specifies that the operand is a
symbol and not a register. This is how the assembler disambiguates the
use of an ARC register name as a symbol. So the instruction
@example
mov r0, @@r0
@end example
moves the address of symbol @code{r0} into register @code{r0}.

@item -
@cindex C pre-processor macro separator, ARC
@cindex ARC C pre-processor macro separator
Used as a separator to obtain a sequence of commands from a C
pre-processor macro.

@end table

@cindex line separator, ARC
@cindex statement separator, ARC
@cindex ARC line separator
@emph{Note:} the ARC assembler does not support a line separator
character, other than the use of @samp{-} in C pre-processor macros.

@node ARC-Regs
@subsection Register Names

@cindex ARC register names
@cindex register names, ARC
The ARC assembler uses the following register names for its core
registers:

@table @code
@item r0-r31
@cindex core general registers, ARC
@cindex ARC core general registers
The core general registers.  Registers @code{r26} through @code{r31}
have special functions, and are usually referred to by those synonyms.

@item gp
@cindex global pointer, ARC
@cindex ARC global pointer
The global pointer and a synonym for @code{r26}.

@item fp
@cindex frame pointer, ARC
@cindex ARC frame pointer
The frame pointer and a synonym for @code{r27}.

@item sp
@cindex stack pointer, ARC
@cindex ARC stack pointer
The stack pointer and a synonym for @code{28}.

@item ilink1
@cindex level 1 interrupt link register, ARC
@cindex ARC level 1 interrupt link register
The level 1 interrupt link register and a synonym for @code{r29}.

@item ilink2
@cindex level 2 interrupt link register, ARC
@cindex ARC level 2 interrupt link register
The level 2 interrupt link register and a synonym for @code{r30}.

@item blink
@cindex link register, ARC
@cindex ARC link register
The link register and a synonym for @code{r31}.

@item r32-r59
@cindex extension core registers, ARC
@cindex ARC extension core registers
The extension core registers.  Only available if enabled using
@option{-mld-extension-reg-mask}.

@item lp_count
@cindex loop counter, ARC
@cindex ARC loop counter
The loop count register.

@item pcl
@cindex word aligned program counter, ARC
@cindex ARC word aligned program counter
The word aligned program counter.

@end table

In addition the ARC processor has a large number of @emph{auxiliary
registers}. The precise set depends on the extensions being supported,
but the following baseline set are always defined:

@table @code
@item identity
@cindex Processor Identification register, ARC
@cindex ARC Processor Identification register
Processor Identification register.  Auxiliary register address 0x4.

@item pc
@cindex Program Counter, ARC
@cindex ARC Program Counter
Program Counter.  Auxiliary register address 0x6.

@item status32
@cindex Status register, ARC
@cindex ARC Status register
Status register.  Auxiliary register address 0x0a.

@item bta
@cindex Branch Target Address, ARC
@cindex ARC Branch Target Address
Branch Target Address.  Auxiliary register address 0x412.

@item ecr
@cindex Exception Cause Register, ARC
@cindex ARC Exception Cause Register
Exception Cause Register.  Auxiliary register address 0x403.

@item int_vector_base
@cindex Interrupt Vector Base address, ARC
@cindex ARC Interrupt Vector Base address
Interrupt Vector Base address.  Auxiliary register address 0x25.

@item status32_p0
@cindex Stored STATUS32 register on entry to level P0 interrupts, ARC
@cindex ARC Stored STATUS32 register on entry to level P0 interrupts
Stored STATUS32 register on entry to level P0 interrupts.  Auxiliary
register address 0xb.

@item aux_user_sp
@cindex Saved User Stack Pointer, ARC
@cindex ARC Saved User Stack Pointer
Saved User Stack Pointer.  Auxiliary register address 0xd.

@item eret
@cindex Exception Return Address, ARC
@cindex ARC Exception Return Address
Exception Return Address.  Auxiliary register address 0x400.

@item erbta
@cindex BTA saved on exception entry, ARC
@cindex ARC BTA saved on exception entry
BTA saved on exception entry.  Auxiliary register address 0x401.

@item erstatus
@cindex STATUS32 saved on exception, ARC
@cindex ARC STATUS32 saved on exception
STATUS32 saved on exception.  Auxiliary register address 0x402.

@item bcr_ver
@cindex Build Configuration Registers Version, ARC
@cindex ARC Build Configuration Registers Version
Build Configuration Registers Version.  Auxiliary register address 0x60.

@item bta_link_build
@cindex Build configuration for: BTA Registers, ARC
@cindex ARC Build configuration for: BTA Registers
Build configuration for: BTA Registers.  Auxiliary register address 0x63.

@item vecbase_ac_build 
@cindex Build configuration for: Interrupts, ARC
@cindex ARC Build configuration for: Interrupts
Build configuration for: Interrupts.  Auxiliary register address 0x68.

@item rf_build
@cindex Build configuration for: Core Registers, ARC
@cindex ARC Build configuration for: Core Registers
Build configuration for: Core Registers.  Auxiliary register address 0x6e.

@item dccm_build 
@cindex DCCM RAM Configuration Register, ARC
@cindex ARC DCCM RAM Configuration Register
DCCM RAM Configuration Register.  Auxiliary register address 0xc1.

@end table

Additional auxiliary register names are defined according to the
processor architecture version and extensions selected by the options.

@node ARC Floating Point
@section Floating Point

@cindex floating point, ARC (@sc{ieee})
@cindex ARC floating point (@sc{ieee})
The baseline ARC core does not have hardware floating point
support. Software floating point support is provided by @code{GCC}
following @sc{ieee 754}.

Hardware floating point is provided through the @code{FPX} extension.
The additional assembler notation required is enabled through the
@option{-mdpfp}, @option{-mdpfp-compact}, @option{-mdpfp-fast},
@option{-mspfp}, @option{-mspfp-compact} and @option{-mspfp-fast}
options.

@node ARC Directives
@section ARC Machine Directives

@cindex machine directives, ARC
@cindex ARC machine directives
The ARC version of @code{@value{AS}} supports the following additional
machine directives:

@table @code

@item .2byte @var{expression} [, @var{expression}]*
@item .3byte @var{expression} [, @var{expression}]*
@item .4byte @var{expression} [, @var{expression}]*
@cindex @code{2byte} directive, ARC
@cindex @code{3byte} directive, ARC
@cindex @code{4byte} directive, ARC
Write 2, 3 or 4-byte values to the current output section.

@item .half @var{expression} [, @var{expression}]*
@cindex @code{half} directive, ARC
@item .short @var{expression} [, @var{expression}]*
@cindex @code{short} directive, ARC
Write 2-byte values to the current output section.

@item .long @var{expression} [, @var{expression}]*
@cindex @code{long} directive, ARC
@item .word @var{expression} [, @var{expression}]*
@cindex @code{word} directive, ARC
Write 4-byte values to the current output section.

@item .option @var{cpu}
@cindex @code{option} directive, ARC
The @code{.option} directive must be followed by the desired core
version. Permitted values for CPU are:
@table @code
@item arc6
Assemble for the ARC600 instruction set

@item arc7
Assemble for the ARC700 instruction set

@item arc
A synonym for arc@value{ARC_CORE_DEFAULT}.

@end table

Note: the @code{.option} directive overrides the command line options
@code{-mcpu=@var{cpu}} and its aliases; a warning is emitted when the
version is not consistent between the two - even for the implicit
default core version (arc@value{ARC_CORE_DEFAULT}).

@end table

@node ARC Modifiers
@section ARC Assembler Modifiers

The following additional assembler modifiers have been added for
position-independent code.  These modifiers are available only with
the ARC 700 processor and generate relocation entries, which are
interpreted by the linker as follows:

@table @code
@item @@gotpc(@var{symbol})
@cindex @@gotpc(@var{symbol}), ARC modifier
Relative distance of @var{symbol}'s Global Offset Table entry from the
current program counter location.

@item @@gotoff(@var{symbol})
@cindex @@gotoff(@var{symbol}), ARC modifier
Distance of @var{symbol} from the base of the Global Offset Table.

@item @@plt32(@var{symbol})
@cindex @@plt32(@var{symbol}), ARC modifier
Distance of @var{symbol}'s Procedure Linkage Table entry from the
current program counter.  This is valid only with branch and link
instructions and PC-relative calls.

@end table

@node ARC Symbols
@section ARC Pre-defined Symbols

The following assembler symbols will prove useful when developing
position-independent code.  These symbols are available only with the
ARC 700 processor.

@table @code
@item __GLOBAL_OFFSET_TABLE__
@cindex __GLOBAL_OFFSET_TABLE__, ARC pre-defined symbol
Symbol referring to the base of the Global Offset Table.

@item __DYNAMIC__
@cindex __DYNAMIC__, ARC pre-defined symbol
An alias for the Global Offset Table
@code{Base__GLOBAL_OFFSET_TABLE__}.  It can be used only with
@code{@@gotpc} modifiers.

@end table

@node ARC Opcodes
@section Opcodes

@cindex ARC opcodes
@cindex opcodes for ARC

For information on the ARC instruction set, see @cite{ARC Programmers
Reference Manual}, ARC International (www.arc.com)
